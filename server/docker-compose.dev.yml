version: '3.8'

services:
  # Development application service
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: task-management-app-dev
    restart: unless-stopped
    ports:
      - '${PORT:-3000}:3000'
      - '9229:9229' # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-taskmanagement_dev}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev-refresh-secret-change-in-production}
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - dev-logs:/app/logs
    command: npm run dev

  # PostgreSQL database for development
  postgres:
    image: postgres:15-alpine
    container_name: task-management-db-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-taskmanagement_dev}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    ports:
      - '${DB_PORT:-5433}:5432'
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/01-init-extensions.sql:ro
    networks:
      - dev-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-taskmanagement_dev}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache for development
  redis:
    image: redis:7-alpine
    container_name: task-management-redis-dev
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6380}:6379'
    volumes:
      - redis-dev-data:/data
    networks:
      - dev-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis Commander for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander-dev
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - dev-network

  # pgAdmin for development
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-dev
    restart: unless-stopped
    ports:
      - '8080:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin-dev-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  dev-logs:
    driver: local
  pgadmin-dev-data:
    driver: local
