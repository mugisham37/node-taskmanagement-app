version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: taskmanagement-postgres-test
    environment:
      POSTGRES_DB: taskmanagement_test
      POSTGRES_USER: taskmanagement_test
      POSTGRES_PASSWORD: test123
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskmanagement_test -d taskmanagement_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: taskmanagement-redis-test
    command: redis-server --requirepass test123
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # API for Testing
  api-test:
    build:
      context: .
      dockerfile: infrastructure/docker/api.Dockerfile
    container_name: taskmanagement-api-test
    environment:
      NODE_ENV: test
      DATABASE_URL: postgresql://taskmanagement_test:test123@postgres-test:5432/taskmanagement_test
      REDIS_URL: redis://:test123@redis-test:6379
      JWT_SECRET: test-jwt-secret-key
      ENCRYPTION_KEY: test-encryption-key-32-chars-long
      API_PORT: 3000
      LOG_LEVEL: error
    ports:
      - "3000:3000"
    networks:
      - test-network
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Web for Testing
  web-test:
    build:
      context: .
      dockerfile: infrastructure/docker/web.Dockerfile
    container_name: taskmanagement-web-test
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://api-test:3000
      NEXT_PUBLIC_WS_URL: ws://api-test:3000
    ports:
      - "3001:3000"
    networks:
      - test-network
    depends_on:
      api-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  test-network:
    driver: bridge

volumes:
  postgres_test_data:
    driver: local