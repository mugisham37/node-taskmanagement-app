version: '3.8'

services:
  # Test PostgreSQL Database
  postgres-test:
    image: postgres:15-alpine
    container_name: unified-platform-postgres-test
    environment:
      POSTGRES_DB: unified_enterprise_platform_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5433:5432' # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql:ro
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/init-extensions.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    tmpfs:
      - /var/lib/postgresql/data # Use tmpfs for faster tests

  # Test Redis Cache
  redis-test:
    image: redis:7-alpine
    container_name: unified-platform-redis-test
    ports:
      - '6380:6379' # Different port to avoid conflicts
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5
    tmpfs:
      - /data # Use tmpfs for faster tests

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: unified-platform-test-runner
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/unified_enterprise_platform_test
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test-jwt-secret-that-is-long-enough-for-validation-requirements
      - JWT_REFRESH_SECRET=test-refresh-secret-that-is-long-enough-for-validation-requirements
      - SESSION_SECRET=test-session-secret-that-is-long-enough-for-validation-requirements
      - CSRF_SECRET=test-csrf-secret-that-is-long-enough-for-validation-requirements
      - WEBHOOK_SECRET=test-webhook-secret-that-is-long-enough-for-validation-requirements
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: npm run test

volumes:
  postgres_test_data:
