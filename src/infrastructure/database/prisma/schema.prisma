// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION DOMAIN
// ============================================================================

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    emailVerified DateTime? @map("email_verified")
    name          String?
    image         String?
    passwordHash  String?   @map("password_hash")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    // MFA fields
    mfaEnabled  Boolean  @default(false) @map("mfa_enabled")
    totpSecret  String?  @map("totp_secret")
    backupCodes String[] @map("backup_codes")

    // Security fields
    failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
    lockedUntil         DateTime? @map("locked_until")
    lastLoginAt         DateTime? @map("last_login_at")
    lastLoginIp         String?   @map("last_login_ip")
    riskScore           Float     @default(0.0) @map("risk_score")

    // Task management extensions
    timezone             String @default("UTC")
    workHours            Json   @default("{\"start\": \"09:00\", \"end\": \"17:00\", \"days\": [1,2,3,4,5]}")
    taskViewPreferences  Json   @default("{\"defaultView\": \"list\", \"groupBy\": \"status\"}") @map("task_view_preferences")
    notificationSettings Json   @default("{\"email\": true, \"push\": true, \"desktop\": true}") @map("notification_settings")
    productivitySettings Json   @default("{\"pomodoroLength\": 25, \"breakLength\": 5}") @map("productivity_settings")
    avatarColor          String @default("#3B82F6") @map("avatar_color")

    // Workspace context
    activeWorkspaceId    String? @map("active_workspace_id")
    workspacePreferences Json    @default("{}") @map("workspace_preferences")

    // Relations
    activeWorkspace     Workspace?           @relation("UserActiveWorkspace", fields: [activeWorkspaceId], references: [id])
    accounts            Account[]
    sessions            Session[]
    devices             Device[]
    webauthnCredentials WebAuthnCredential[]

    // Workspace relations
    ownedWorkspaces      Workspace[]       @relation("WorkspaceOwner")
    workspaceMemberships WorkspaceMember[] @relation("WorkspaceMemberUser")
    invitedMemberships   WorkspaceMember[] @relation("WorkspaceMemberInviter")

    // Project relations
    ownedProjects      Project[]       @relation("ProjectOwner")
    projectMemberships ProjectMember[]
    archivedProjects   Project[]       @relation("ProjectArchiver")

    // Task relations
    createdTasks  Task[] @relation("TaskCreator")
    assignedTasks Task[] @relation("TaskAssignee")
    reportedTasks Task[] @relation("TaskReporter")

    // Team relations
    teamMemberships TeamMember[]

    // Activity and audit
    activities Activity[]
    auditLogs  AuditLog[]

    // Notifications
    notifications Notification[]

    // Comments
    comments Comment[]

    // Time tracking
    timeEntries TimeEntry[]

    // Webhooks
    webhooks Webhook[]

    // Search relations
    savedSearches    SavedSearch[]
    savedSearchUsage SavedSearchUsage[]
    searchAnalytics  SearchAnalytics[]
    searchHistory    SearchHistory[]

    // Database indexes for performance optimization
    @@index([email])
    @@index([activeWorkspaceId])
    @@index([createdAt])
    @@index([lastLoginAt])
    @@index([failedLoginAttempts, lockedUntil])
    @@index([riskScore])
    @@map("users")
}

model Account {
    id                String   @id @default(cuid())
    userId            String   @map("user_id")
    type              String
    provider          String
    providerAccountId String   @map("provider_account_id")
    refreshToken      String?  @map("refresh_token") @db.Text
    accessToken       String?  @map("access_token") @db.Text
    expiresAt         Int?     @map("expires_at")
    tokenType         String?  @map("token_type")
    scope             String?
    idToken           String?  @map("id_token") @db.Text
    sessionState      String?  @map("session_state")
    createdAt         DateTime @default(now()) @map("created_at")
    updatedAt         DateTime @updatedAt @map("updated_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    workspaceId  String?  @map("workspace_id")
    deviceId     String?  @map("device_id")
    ipAddress    String?  @map("ip_address")
    userAgent    String?  @map("user_agent")
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")

    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace? @relation(fields: [workspaceId], references: [id])
    device    Device?    @relation(fields: [deviceId], references: [id])

    @@map("sessions")
}

model Device {
    id          String    @id @default(cuid())
    userId      String    @map("user_id")
    name        String
    type        String // mobile, desktop, tablet
    fingerprint String    @unique
    trusted     Boolean   @default(false)
    lastUsedAt  DateTime? @map("last_used_at")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    sessions Session[]

    @@map("devices")
}

model WebAuthnCredential {
    id           String    @id @default(cuid())
    userId       String    @map("user_id")
    credentialId String    @unique @map("credential_id")
    publicKey    Bytes     @map("public_key")
    counter      BigInt    @default(0)
    deviceType   String    @map("device_type")
    backedUp     Boolean   @default(false) @map("backed_up")
    transports   String[]  @default([])
    name         String?
    createdAt    DateTime  @default(now()) @map("created_at")
    lastUsedAt   DateTime? @map("last_used_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("webauthn_credentials")
}

// ============================================================================
// WORKSPACE AND MULTI-TENANCY
// ============================================================================

model Workspace {
    id          String  @id @default(cuid())
    name        String
    slug        String  @unique
    description String?

    // Ownership and billing
    ownerId          String  @map("owner_id")
    subscriptionTier String  @default("free") @map("subscription_tier")
    billingEmail     String? @map("billing_email")

    // Configuration
    settings         Json @default("{}")
    branding         Json @default("{}")
    securitySettings Json @default("{}") @map("security_settings")

    // Status and limits
    isActive       Boolean @default(true) @map("is_active")
    memberLimit    Int     @default(10) @map("member_limit")
    projectLimit   Int     @default(5) @map("project_limit")
    storageLimitGb Int     @default(1) @map("storage_limit_gb")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id])
    members     WorkspaceMember[]
    projects    Project[]
    tasks       Task[]
    teams       Team[]
    roles       WorkspaceRole[]
    sessions    Session[]
    activeUsers User[]            @relation("UserActiveWorkspace")

    // Activity and audit
    activities Activity[]
    auditLogs  AuditLog[]

    // Notifications
    notifications Notification[]

    // Webhooks
    webhooks          Webhook[]
    webhookDeliveries WebhookDelivery[]

    // Search relations
    searchIndexes   SearchIndex[]
    savedSearches   SavedSearch[]
    searchAnalytics SearchAnalytics[]
    searchPresets   SearchPreset[]
    searchHistory   SearchHistory[]

    // Database indexes for performance optimization
    @@index([slug])
    @@index([ownerId])
    @@index([subscriptionTier])
    @@index([isActive])
    @@index([createdAt])
    @@index([deletedAt])
    @@index([ownerId, isActive])
    @@index([subscriptionTier, isActive])
    @@map("workspaces")
}

model WorkspaceRole {
    id           String   @id @default(cuid())
    workspaceId  String   @map("workspace_id")
    name         String
    description  String?
    permissions  String[]
    isSystemRole Boolean  @default(false) @map("is_system_role")
    createdAt    DateTime @default(now()) @map("created_at")

    workspace Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    members   WorkspaceMember[]

    @@unique([workspaceId, name])
    @@index([workspaceId])
    @@index([isSystemRole])
    @@map("workspace_roles")
}

model WorkspaceMember {
    id          String @id @default(cuid())
    workspaceId String @map("workspace_id")
    userId      String @map("user_id")
    roleId      String @map("role_id")

    // Membership details
    invitedBy    String?   @map("invited_by")
    joinedAt     DateTime  @default(now()) @map("joined_at")
    lastActiveAt DateTime? @map("last_active_at")

    // Status
    status MemberStatus @default(ACTIVE)

    workspace Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    user      User          @relation("WorkspaceMemberUser", fields: [userId], references: [id], onDelete: Cascade)
    role      WorkspaceRole @relation(fields: [roleId], references: [id])
    inviter   User?         @relation("WorkspaceMemberInviter", fields: [invitedBy], references: [id])

    @@unique([workspaceId, userId])
    @@index([workspaceId])
    @@index([userId])
    @@index([roleId])
    @@index([status])
    @@index([joinedAt])
    @@index([lastActiveAt])
    @@index([workspaceId, status])
    @@index([userId, status])
    @@map("workspace_members")
}

// ============================================================================
// PROJECT MANAGEMENT
// ============================================================================

model Project {
    id          String  @id @default(cuid())
    workspaceId String  @map("workspace_id")
    name        String
    description String?
    color       String  @default("#3B82F6")

    // Project management
    ownerId  String        @map("owner_id")
    status   ProjectStatus @default(PLANNING)
    priority Priority      @default(MEDIUM)

    // Timeline and budget
    startDate      DateTime? @map("start_date")
    endDate        DateTime? @map("end_date")
    budgetAmount   Decimal?  @map("budget_amount") @db.Decimal(10, 2)
    budgetCurrency String    @default("USD") @map("budget_currency")

    // Configuration
    settings   Json    @default("{}")
    templateId String? @map("template_id")

    // Status tracking
    isArchived Boolean   @default(false) @map("is_archived")
    archivedAt DateTime? @map("archived_at")
    archivedBy String?   @map("archived_by")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    workspace Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    owner     User             @relation("ProjectOwner", fields: [ownerId], references: [id])
    template  ProjectTemplate? @relation(fields: [templateId], references: [id])
    archiver  User?            @relation("ProjectArchiver", fields: [archivedBy], references: [id])

    tasks   Task[]
    members ProjectMember[]
    teams   Team[]

    // Activity and audit
    activities Activity[]
    comments   Comment[]

    // Database indexes for performance optimization
    @@index([workspaceId])
    @@index([ownerId])
    @@index([status])
    @@index([priority])
    @@index([isArchived])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([deletedAt])
    @@index([startDate])
    @@index([endDate])
    @@index([templateId])
    @@index([workspaceId, status])
    @@index([workspaceId, isArchived])
    @@index([ownerId, status])
    @@index([status, priority])
    @@map("projects")
}

model ProjectTemplate {
    id          String   @id @default(cuid())
    name        String
    description String?
    settings    Json     @default("{}")
    taskData    Json     @default("[]")
    isPublic    Boolean  @default(false) @map("is_public")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    projects Project[]

    @@index([isPublic])
    @@index([createdAt])
    @@map("project_templates")
}

model ProjectMember {
    id        String            @id @default(cuid())
    projectId String            @map("project_id")
    userId    String            @map("user_id")
    role      ProjectMemberRole @default(MEMBER)

    addedBy String?  @map("added_by")
    addedAt DateTime @default(now()) @map("added_at")

    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([projectId, userId])
    @@index([projectId])
    @@index([userId])
    @@index([role])
    @@index([addedAt])
    @@map("project_members")
}

// ============================================================================
// TASK MANAGEMENT
// ============================================================================

model Task {
    id          String  @id @default(cuid())
    workspaceId String  @map("workspace_id")
    projectId   String? @map("project_id")

    // Basic task information
    title       String
    description String?
    status      TaskStatus @default(TODO)
    priority    Priority   @default(MEDIUM)

    // Assignment and ownership
    assigneeId String? @map("assignee_id")
    creatorId  String  @map("creator_id")
    reporterId String? @map("reporter_id")

    // Timeline management
    dueDate     DateTime? @map("due_date")
    startDate   DateTime? @map("start_date")
    completedAt DateTime? @map("completed_at")

    // Effort tracking
    estimatedHours Decimal? @map("estimated_hours") @db.Decimal(5, 2)
    actualHours    Decimal? @map("actual_hours") @db.Decimal(5, 2)
    storyPoints    Int?     @map("story_points")

    // Organization
    tags         String[] @default([])
    labels       String[] @default([])
    epicId       String?  @map("epic_id")
    parentTaskId String?  @map("parent_task_id")

    // Attachments and links
    attachments   Json @default("[]")
    externalLinks Json @default("[]") @map("external_links")

    // Recurring task support
    recurringTaskId        String?   @map("recurring_task_id")
    recurrenceInstanceDate DateTime? @map("recurrence_instance_date") @db.Date

    // Collaboration
    watchers       String[] @default([])
    lastActivityAt DateTime @default(now()) @map("last_activity_at")

    // Metadata
    customFields Json @default("{}") @map("custom_fields")
    position     Int  @default(0)

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    project       Project?       @relation(fields: [projectId], references: [id])
    assignee      User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
    creator       User           @relation("TaskCreator", fields: [creatorId], references: [id])
    reporter      User?          @relation("TaskReporter", fields: [reporterId], references: [id])
    epic          Task?          @relation("TaskEpic", fields: [epicId], references: [id])
    parentTask    Task?          @relation("TaskParent", fields: [parentTaskId], references: [id])
    recurringTask RecurringTask? @relation(fields: [recurringTaskId], references: [id])

    // Self-referential relations
    epicTasks Task[] @relation("TaskEpic")
    subtasks  Task[] @relation("TaskParent")

    // Dependencies
    dependsOn  TaskDependency[] @relation("TaskDependsOn")
    dependents TaskDependency[] @relation("TaskDependent")

    // Activity and collaboration
    activities Activity[]
    comments   Comment[]

    // Time tracking
    timeEntries TimeEntry[]

    // Database indexes for performance optimization
    @@index([workspaceId])
    @@index([projectId])
    @@index([assigneeId])
    @@index([creatorId])
    @@index([reporterId])
    @@index([status])
    @@index([priority])
    @@index([dueDate])
    @@index([startDate])
    @@index([completedAt])
    @@index([epicId])
    @@index([parentTaskId])
    @@index([recurringTaskId])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([deletedAt])
    @@index([lastActivityAt])
    @@index([position])
    // Composite indexes for common query patterns
    @@index([workspaceId, status])
    @@index([workspaceId, assigneeId])
    @@index([workspaceId, creatorId])
    @@index([workspaceId, priority])
    @@index([projectId, status])
    @@index([projectId, assigneeId])
    @@index([assigneeId, status])
    @@index([assigneeId, dueDate])
    @@index([status, priority])
    @@index([status, dueDate])
    @@index([dueDate, priority])
    @@index([workspaceId, status, priority])
    @@index([workspaceId, assigneeId, status])
    @@index([projectId, status, priority])
    // Full-text search indexes
    @@index([title])
    @@map("tasks")
}

model TaskDependency {
    id          String         @id @default(cuid())
    taskId      String         @map("task_id")
    dependsOnId String         @map("depends_on_id")
    type        DependencyType @default(FINISH_TO_START)
    createdAt   DateTime       @default(now()) @map("created_at")

    task      Task @relation("TaskDependent", fields: [taskId], references: [id], onDelete: Cascade)
    dependsOn Task @relation("TaskDependsOn", fields: [dependsOnId], references: [id], onDelete: Cascade)

    @@unique([taskId, dependsOnId])
    @@index([taskId])
    @@index([dependsOnId])
    @@index([type])
    @@index([createdAt])
    @@map("task_dependencies")
}

model RecurringTask {
    id          String  @id @default(cuid())
    workspaceId String  @map("workspace_id")
    projectId   String? @map("project_id")

    // Recurrence configuration
    pattern      RecurrencePattern
    interval     Int               @default(1)
    daysOfWeek   Int[]             @default([]) @map("days_of_week")
    daysOfMonth  Int[]             @default([]) @map("days_of_month")
    monthsOfYear Int[]             @default([]) @map("months_of_year")

    // Timeline
    startDate   DateTime  @map("start_date")
    endDate     DateTime? @map("end_date")
    nextDueDate DateTime? @map("next_due_date")

    // Task template
    taskTemplate Json @map("task_template")

    // Status
    isActive Boolean @default(true) @map("is_active")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    tasks Task[]

    @@index([workspaceId])
    @@index([projectId])
    @@index([pattern])
    @@index([isActive])
    @@index([startDate])
    @@index([endDate])
    @@index([nextDueDate])
    @@index([workspaceId, isActive])
    @@index([projectId, isActive])
    @@index([nextDueDate, isActive])
    @@map("recurring_tasks")
}

// ============================================================================
// TEAM MANAGEMENT
// ============================================================================

model Team {
    id          String  @id @default(cuid())
    workspaceId String  @map("workspace_id")
    projectId   String? @map("project_id")
    name        String
    description String?
    color       String  @default("#3B82F6")
    settings    Json    @default("{}")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    workspace Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    project   Project?     @relation(fields: [projectId], references: [id])
    members   TeamMember[]

    @@index([workspaceId])
    @@index([projectId])
    @@index([createdAt])
    @@index([workspaceId, projectId])
    @@map("teams")
}

model TeamMember {
    id       String         @id @default(cuid())
    teamId   String         @map("team_id")
    userId   String         @map("user_id")
    role     TeamMemberRole @default(MEMBER)
    joinedAt DateTime       @default(now()) @map("joined_at")

    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([teamId, userId])
    @@index([teamId])
    @@index([userId])
    @@index([role])
    @@index([joinedAt])
    @@map("team_members")
}

// ============================================================================
// COLLABORATION AND COMMUNICATION
// ============================================================================

model Comment {
    id          String   @id @default(cuid())
    content     String
    authorId    String   @map("author_id")
    taskId      String?  @map("task_id")
    projectId   String?  @map("project_id")
    parentId    String?  @map("parent_id")
    mentions    String[] @default([])
    attachments Json     @default("[]")

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    // Relations
    author  User      @relation(fields: [authorId], references: [id])
    task    Task?     @relation(fields: [taskId], references: [id])
    project Project?  @relation(fields: [projectId], references: [id])
    parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
    replies Comment[] @relation("CommentReplies")

    @@index([authorId])
    @@index([taskId])
    @@index([projectId])
    @@index([parentId])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([deletedAt])
    @@index([taskId, createdAt])
    @@index([projectId, createdAt])
    @@index([authorId, createdAt])
    @@map("comments")
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

model Notification {
    id          String           @id @default(cuid())
    userId      String           @map("user_id")
    workspaceId String?          @map("workspace_id")
    type        NotificationType
    title       String
    message     String
    data        Json             @default("{}")

    // Delivery status
    isRead      Boolean   @default(false) @map("is_read")
    readAt      DateTime? @map("read_at")
    deliveredAt DateTime? @map("delivered_at")

    // Channels
    channels String[] @default([])

    createdAt DateTime  @default(now()) @map("created_at")
    expiresAt DateTime? @map("expires_at")

    // Relations
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace? @relation(fields: [workspaceId], references: [id])

    @@index([userId])
    @@index([workspaceId])
    @@index([type])
    @@index([isRead])
    @@index([createdAt])
    @@index([expiresAt])
    @@index([deliveredAt])
    @@index([userId, isRead])
    @@index([userId, type])
    @@index([workspaceId, type])
    @@index([userId, createdAt])
    @@map("notifications")
}

// ============================================================================
// ACTIVITY AND AUDIT
// ============================================================================

model Activity {
    id          String  @id @default(cuid())
    userId      String  @map("user_id")
    workspaceId String? @map("workspace_id")
    projectId   String? @map("project_id")
    taskId      String? @map("task_id")

    type        ActivityType
    action      String
    description String
    metadata    Json         @default("{}")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user      User       @relation(fields: [userId], references: [id])
    workspace Workspace? @relation(fields: [workspaceId], references: [id])
    project   Project?   @relation(fields: [projectId], references: [id])
    task      Task?      @relation(fields: [taskId], references: [id])

    @@index([userId])
    @@index([workspaceId])
    @@index([projectId])
    @@index([taskId])
    @@index([type])
    @@index([createdAt])
    @@index([userId, createdAt])
    @@index([workspaceId, createdAt])
    @@index([projectId, createdAt])
    @@index([taskId, createdAt])
    @@index([type, createdAt])
    @@map("activities")
}

model AuditLog {
    id          String  @id @default(cuid())
    userId      String? @map("user_id")
    workspaceId String? @map("workspace_id")

    action     String
    resource   String
    resourceId String? @map("resource_id")
    oldValues  Json?   @map("old_values")
    newValues  Json?   @map("new_values")

    ipAddress String? @map("ip_address")
    userAgent String? @map("user_agent")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user      User?      @relation(fields: [userId], references: [id])
    workspace Workspace? @relation(fields: [workspaceId], references: [id])

    @@index([userId])
    @@index([workspaceId])
    @@index([action])
    @@index([resource])
    @@index([resourceId])
    @@index([createdAt])
    @@index([userId, createdAt])
    @@index([workspaceId, createdAt])
    @@index([resource, resourceId])
    @@index([action, createdAt])
    @@map("audit_logs")
}

// ============================================================================
// TIME TRACKING
// ============================================================================

model TimeEntry {
    id     String @id @default(cuid())
    taskId String @map("task_id")
    userId String @map("user_id")

    description String?
    startTime   DateTime  @map("start_time")
    endTime     DateTime? @map("end_time")
    duration    Int? // Duration in seconds

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id])

    @@index([taskId])
    @@index([userId])
    @@index([startTime])
    @@index([endTime])
    @@index([createdAt])
    @@index([taskId, userId])
    @@index([userId, startTime])
    @@index([taskId, startTime])
    @@map("time_entries")
}

// ============================================================================
// ENUMS
// ============================================================================

enum MemberStatus {
    ACTIVE
    INACTIVE
    PENDING
    SUSPENDED
}

enum ProjectStatus {
    PLANNING
    ACTIVE
    ON_HOLD
    COMPLETED
    CANCELLED
}

enum ProjectMemberRole {
    OWNER
    ADMIN
    MEMBER
    VIEWER
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    IN_REVIEW
    DONE
    CANCELLED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum DependencyType {
    FINISH_TO_START
    START_TO_START
    FINISH_TO_FINISH
    START_TO_FINISH
}

enum RecurrencePattern {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

enum TeamMemberRole {
    LEAD
    MEMBER
}

enum NotificationType {
    TASK_ASSIGNED
    TASK_UPDATED
    TASK_COMPLETED
    TASK_OVERDUE
    COMMENT_ADDED
    MENTION
    PROJECT_UPDATED
    TEAM_INVITATION
    WORKSPACE_INVITATION
    SYSTEM_ALERT
}

enum ActivityType {
    TASK_CREATED
    TASK_UPDATED
    TASK_COMPLETED
    TASK_DELETED
    PROJECT_CREATED
    PROJECT_UPDATED
    PROJECT_DELETED
    COMMENT_ADDED
    COMMENT_UPDATED
    COMMENT_DELETED
    USER_JOINED
    USER_LEFT
    WORKSPACE_CREATED
    WORKSPACE_UPDATED
    TEAM_CREATED
    TEAM_UPDATED
}

// ============================================================================
// WEBHOOK SYSTEM
// ============================================================================

model Webhook {
    id          String        @id @default(cuid())
    workspaceId String        @map("workspace_id")
    userId      String        @map("user_id")
    name        String
    url         String
    secret      String?
    status      WebhookStatus @default(ACTIVE)
    events      String[]

    // HTTP Configuration
    headers            Json    @default("{}")
    httpMethod         String  @default("POST") @map("http_method")
    contentType        String  @default("application/json") @map("content_type")
    signatureHeader    String? @map("signature_header")
    signatureAlgorithm String  @default("sha256") @map("signature_algorithm")

    // Retry Configuration
    timeout    Int @default(30000)
    maxRetries Int @default(3) @map("max_retries")
    retryDelay Int @default(1000) @map("retry_delay")

    // Metadata and Statistics
    metadata     Json @default("{}")
    successCount Int  @default(0) @map("success_count")
    failureCount Int  @default(0) @map("failure_count")

    // Status tracking
    lastDeliveryAt     DateTime? @map("last_delivery_at")
    lastDeliveryStatus String?   @map("last_delivery_status")
    lastError          String?   @map("last_error")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    workspace  Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    user       User              @relation(fields: [userId], references: [id])
    deliveries WebhookDelivery[]

    @@index([workspaceId])
    @@index([userId])
    @@index([status])
    @@index([createdAt])
    @@index([lastDeliveryAt])
    @@index([workspaceId, status])
    @@index([userId, status])
    @@map("webhooks")
}

model WebhookDelivery {
    id          String @id @default(cuid())
    webhookId   String @map("webhook_id")
    workspaceId String @map("workspace_id")

    // Event information
    event   String
    payload Json

    // Delivery status
    status          WebhookDeliveryStatus @default(PENDING)
    httpStatusCode  Int?                  @map("http_status_code")
    responseBody    String?               @map("response_body")
    responseHeaders Json?                 @map("response_headers")
    errorMessage    String?               @map("error_message")

    // Retry management
    attemptCount Int       @default(0) @map("attempt_count")
    maxAttempts  Int       @default(3) @map("max_attempts")
    nextRetryAt  DateTime? @map("next_retry_at")

    // Performance tracking
    deliveredAt DateTime? @map("delivered_at")
    duration    Int? // Duration in milliseconds

    // Metadata
    metadata Json @default("{}")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    webhook   Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@index([webhookId])
    @@index([workspaceId])
    @@index([status])
    @@index([event])
    @@index([createdAt])
    @@index([deliveredAt])
    @@index([nextRetryAt])
    @@index([webhookId, status])
    @@index([workspaceId, status])
    @@index([status, nextRetryAt])
    @@map("webhook_deliveries")
}

// Add webhook relations to existing models
model User {
    // ... existing fields ...
    webhooks Webhook[]
}

model Workspace {
    // ... existing fields ...
    webhooks          Webhook[]
    webhookDeliveries WebhookDelivery[]
}

enum WebhookStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    FAILED
}

enum WebhookDeliveryStatus {
    PENDING
    DELIVERED
    FAILED
    CANCELLED
}

// ============================================================================
// FILE MANAGEMENT DOMAIN
// ============================================================================

model File {
    id          String @id @default(cuid())
    workspaceId String @map("workspace_id")
    uploadedBy  String @map("uploaded_by")

    // File information
    originalName String @map("original_name")
    storagePath  String @unique @map("storage_path")
    mimeType     String @map("mime_type")
    size         BigInt
    checksum     String

    // File metadata
    metadata Json @default("{}")

    // Access control
    isPublic       Boolean @default(false) @map("is_public")
    workspaceLevel Boolean @default(false) @map("workspace_level")
    projectLevel   Boolean @default(false) @map("project_level")

    // Versioning
    currentVersion Int @default(1) @map("current_version")

    // Security
    virusScanStatus String    @default("pending") @map("virus_scan_status") // pending, clean, infected, error
    virusScanDate   DateTime? @map("virus_scan_date")
    encryptionKey   String?   @map("encryption_key")

    // Processing status
    thumbnailGenerated Boolean @default(false) @map("thumbnail_generated")
    previewGenerated   Boolean @default(false) @map("preview_generated")
    isCompressed       Boolean @default(false) @map("is_compressed")
    compressionRatio   Float?  @map("compression_ratio")

    // Lifecycle
    isDeleted Boolean   @default(false) @map("is_deleted")
    deletedAt DateTime? @map("deleted_at")
    deletedBy String?   @map("deleted_by")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    uploader  User      @relation("FileUploader", fields: [uploadedBy], references: [id])
    deleter   User?     @relation("FileDeleter", fields: [deletedBy], references: [id])

    // File relationships
    versions    FileVersion[]
    attachments Attachment[]
    permissions FilePermission[]

    @@index([workspaceId])
    @@index([uploadedBy])
    @@index([mimeType])
    @@index([isDeleted])
    @@index([createdAt])
    @@index([virusScanStatus])
    @@index([isPublic])
    @@index([workspaceLevel])
    @@index([projectLevel])
    @@index([workspaceId, isDeleted])
    @@index([uploadedBy, isDeleted])
    @@index([mimeType, isDeleted])
    @@index([virusScanStatus, isDeleted])
    @@map("files")
}

model FileVersion {
    id      String @id @default(cuid())
    fileId  String @map("file_id")
    version Int

    // Version information
    storagePath String @map("storage_path")
    size        BigInt
    checksum    String
    uploadedBy  String @map("uploaded_by")

    // Change tracking
    changeDescription String? @map("change_description")
    metadata          Json    @default("{}")

    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    file     File @relation(fields: [fileId], references: [id], onDelete: Cascade)
    uploader User @relation(fields: [uploadedBy], references: [id])

    @@unique([fileId, version])
    @@index([fileId])
    @@index([uploadedBy])
    @@index([createdAt])
    @@map("file_versions")
}

model Attachment {
    id          String @id @default(cuid())
    fileId      String @map("file_id")
    workspaceId String @map("workspace_id")

    // Attachment context
    attachedTo   String @map("attached_to") // 'task', 'comment', 'project'
    attachedToId String @map("attached_to_id")
    attachedBy   String @map("attached_by")

    // Attachment details
    description String?
    position    Int     @default(0)

    // Lifecycle
    isDeleted Boolean   @default(false) @map("is_deleted")
    deletedAt DateTime? @map("deleted_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    file           File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
    workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    attachedByUser User      @relation(fields: [attachedBy], references: [id])

    @@index([fileId])
    @@index([workspaceId])
    @@index([attachedTo])
    @@index([attachedToId])
    @@index([attachedBy])
    @@index([isDeleted])
    @@index([createdAt])
    @@index([attachedTo, attachedToId])
    @@index([workspaceId, isDeleted])
    @@map("attachments")
}

model FilePermission {
    id     String @id @default(cuid())
    fileId String @map("file_id")
    userId String @map("user_id")

    // Permissions
    permissions String[] // 'read', 'write', 'delete', 'share'

    // Inheritance
    inheritFromParent Boolean @default(false) @map("inherit_from_parent")
    parentType        String? @map("parent_type") // 'task', 'project', 'comment'
    parentId          String? @map("parent_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([fileId, userId])
    @@index([fileId])
    @@index([userId])
    @@index([parentType])
    @@index([parentId])
    @@map("file_permissions")
}

model FileIndex {
    id     String @id @default(cuid())
    fileId String @map("file_id")

    // Search indexing
    content  String? // Extracted text content
    tags     String[] @default([])
    keywords String[] @default([])
    language String?

    // OCR results
    ocrText     String? @map("ocr_text")
    ocrLanguage String? @map("ocr_language")

    // Processing status
    isIndexed Boolean   @default(false) @map("is_indexed")
    indexedAt DateTime? @map("indexed_at")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

    @@unique([fileId])
    @@index([isIndexed])
    @@index([indexedAt])
    @@index([language])
    @@map("file_indexes")
}

// Add file relations to existing models
model User {
    // ... existing fields ...

    // File relations
    uploadedFiles   File[]           @relation("FileUploader")
    deletedFiles    File[]           @relation("FileDeleter")
    fileVersions    FileVersion[]
    attachments     Attachment[]
    filePermissions FilePermission[]
}

model Workspace {
    // ... existing fields ...

    // File relations
    files       File[]
    attachments Attachment[]
}

// Add file index relation
model File {
    // ... existing fields ...

    // Search index
    searchIndex FileIndex?
}

// Search and filtering models
model SearchIndex {
    id           String   @id @default(uuid()) @db.Uuid
    entityType   String   @map("entity_type") @db.VarChar(50)
    entityId     String   @map("entity_id") @db.Uuid
    workspaceId  String   @map("workspace_id") @db.Uuid
    title        String   @db.Text
    content      String   @db.Text
    metadata     Json     @default("{}")
    searchVector String?  @map("search_vector") @db.Text
    tags         String[] @default([])
    permissions  String[] @default([])
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

    // Relations
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([entityType, entityId])
    @@index([workspaceId])
    @@index([entityType])
    @@index([tags])
    @@index([permissions])
    @@index([updatedAt(sort: Desc)])
    @@index([workspaceId, entityType])
    @@index([entityType, updatedAt])
    @@map("search_index")
}

model SavedSearch {
    id          String   @id @default(uuid()) @db.Uuid
    userId      String   @map("user_id") @db.Uuid
    workspaceId String   @map("workspace_id") @db.Uuid
    name        String   @db.VarChar(200)
    description String?  @db.Text
    query       String   @db.Text
    filters     Json     @default("{}")
    isShared    Boolean  @default(false) @map("is_shared")
    sharedWith  String[] @default([]) @map("shared_with") @db.Uuid
    isDefault   Boolean  @default(false) @map("is_default")
    sortBy      String   @default("relevance") @map("sort_by") @db.VarChar(50)
    sortOrder   String   @default("desc") @map("sort_order") @db.VarChar(4)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

    // Relations
    user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    usage     SavedSearchUsage[]

    @@unique([userId, workspaceId, name])
    @@index([userId])
    @@index([workspaceId])
    @@index([isShared])
    @@index([userId, workspaceId, isDefault])
    @@index([updatedAt(sort: Desc)])
    @@map("saved_search")
}

model SavedSearchUsage {
    id            String   @id @default(uuid()) @db.Uuid
    savedSearchId String   @map("saved_search_id") @db.Uuid
    userId        String   @map("user_id") @db.Uuid
    usedAt        DateTime @default(now()) @map("used_at")

    // Relations
    savedSearch SavedSearch @relation(fields: [savedSearchId], references: [id], onDelete: Cascade)
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([savedSearchId])
    @@index([userId])
    @@index([usedAt(sort: Desc)])
    @@map("saved_search_usage")
}

model SearchAnalytics {
    id           String   @id @default(uuid()) @db.Uuid
    workspaceId  String   @map("workspace_id") @db.Uuid
    userId       String?  @map("user_id") @db.Uuid
    query        String   @db.Text
    entityTypes  String[] @default([]) @map("entity_types")
    filters      Json     @default("{}")
    resultCount  Int      @default(0) @map("result_count")
    responseTime Int      @default(0) @map("response_time")
    executedAt   DateTime @default(now()) @map("executed_at")

    // Relations
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([workspaceId])
    @@index([userId])
    @@index([executedAt(sort: Desc)])
    @@index([query])
    @@index([entityTypes])
    @@map("search_analytics")
}

model SearchPreset {
    id          String   @id @default(uuid()) @db.Uuid
    workspaceId String?  @map("workspace_id") @db.Uuid
    name        String   @db.VarChar(200)
    description String?  @db.Text
    filters     Json     @default("{}")
    sortBy      String   @default("relevance") @map("sort_by") @db.VarChar(50)
    sortOrder   String   @default("desc") @map("sort_order") @db.VarChar(4)
    entityTypes String[] @default([]) @map("entity_types")
    isSystem    Boolean  @default(false) @map("is_system")
    isActive    Boolean  @default(true) @map("is_active")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

    // Relations
    workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([workspaceId, name])
    @@index([workspaceId])
    @@index([isSystem])
    @@index([isActive])
    @@map("search_preset")
}

model SearchHistory {
    id          String   @id @default(uuid()) @db.Uuid
    userId      String   @map("user_id") @db.Uuid
    workspaceId String   @map("workspace_id") @db.Uuid
    query       String   @db.Text
    filters     Json     @default("{}")
    entityTypes String[] @default([]) @map("entity_types")
    resultCount Int      @default(0) @map("result_count")
    executedAt  DateTime @default(now()) @map("executed_at")

    // Relations
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([workspaceId])
    @@index([executedAt(sort: Desc)])
    @@index([query])
    @@map("search_history")
}
