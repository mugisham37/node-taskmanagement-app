version: '3.8'

services:
  # Blackbox Exporter for uptime monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: blackbox-exporter
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox-exporter.yml:/etc/blackbox_exporter/config.yml:ro
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
      - '--web.listen-address=:9115'
      - '--log.level=info'
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Uptime Kuma for visual uptime monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.8
    container_name: uptime-kuma
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma_data:/app/data
    environment:
      - UPTIME_KUMA_PORT=3001
      - UPTIME_KUMA_HOST=0.0.0.0
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Smokeping for network latency monitoring
  smokeping:
    image: linuxserver/smokeping:3.7.3
    container_name: smokeping
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - "8080:80"
    volumes:
      - smokeping_config:/config
      - smokeping_data:/data
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Statping for status page
  statping:
    image: statping/statping:v0.90.74
    container_name: statping
    environment:
      - DB_CONN=sqlite
      - DB_HOST=/app/statping.db
      - NAME=TaskManagement Status
      - DESCRIPTION=TaskManagement System Status Page
    ports:
      - "8282:8080"
    volumes:
      - statping_data:/app
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Pingdom alternative - Healthchecks.io
  healthchecks:
    image: healthchecks/healthchecks:v2.10
    container_name: healthchecks
    environment:
      - SECRET_KEY=${HEALTHCHECKS_SECRET_KEY}
      - DEBUG=False
      - DEFAULT_FROM_EMAIL=noreply@taskmanagement.example.com
      - EMAIL_HOST=${SMTP_HOST}
      - EMAIL_PORT=${SMTP_PORT}
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=${SMTP_USERNAME}
      - EMAIL_HOST_PASSWORD=${SMTP_PASSWORD}
      - SITE_ROOT=https://healthchecks.taskmanagement.example.com
      - SITE_NAME=TaskManagement Health Checks
    ports:
      - "8000:8000"
    volumes:
      - healthchecks_data:/opt/healthchecks/hc-data
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Custom health check service
  health-checker:
    image: alpine:3.18
    container_name: health-checker
    command: |
      sh -c "
        apk add --no-cache curl jq &&
        while true; do
          echo 'Running health checks...'
          
          # Check API health
          if curl -f -s http://taskmanagement-api:3000/health > /dev/null; then
            echo 'API: OK'
          else
            echo 'API: FAILED'
          fi
          
          # Check Web app
          if curl -f -s http://taskmanagement-web:3001/health > /dev/null; then
            echo 'Web: OK'
          else
            echo 'Web: FAILED'
          fi
          
          # Check Admin app
          if curl -f -s http://taskmanagement-admin:3002/health > /dev/null; then
            echo 'Admin: OK'
          else
            echo 'Admin: FAILED'
          fi
          
          # Check Database
          if nc -z postgres 5432; then
            echo 'Database: OK'
          else
            echo 'Database: FAILED'
          fi
          
          # Check Redis
          if nc -z redis 6379; then
            echo 'Redis: OK'
          else
            echo 'Redis: FAILED'
          fi
          
          sleep 30
        done
      "
    networks:
      - monitoring
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  uptime_kuma_data:
    driver: local
  smokeping_config:
    driver: local
  smokeping_data:
    driver: local
  statping_data:
    driver: local
  healthchecks_data:
    driver: local

networks:
  monitoring:
    external: true