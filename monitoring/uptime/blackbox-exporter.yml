modules:
  # HTTP 2xx probe
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      headers:
        Host: taskmanagement.example.com
        Accept-Language: en-US
      no_follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: false
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # HTTP POST probe
  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"health": "check"}'
      valid_status_codes: [200, 201, 202]

  # HTTPS probe with SSL verification
  https_2xx:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      no_follow_redirects: false
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # TCP probe
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"

  # ICMP probe
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"

  # DNS probe
  dns_taskmanagement:
    prober: dns
    timeout: 5s
    dns:
      query_name: "taskmanagement.example.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp:
          - ".*127.0.0.1"
        fail_if_not_matches_regexp:
          - "taskmanagement.example.com.\t300\tIN\tA\t.*"

  # API health check
  api_health:
    prober: http
    timeout: 10s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      method: GET
      headers:
        Accept: application/json
      fail_if_body_not_matches_regexp:
        - '"status":\s*"healthy"'
      fail_if_header_not_matches_regexp:
        - "Content-Type:application/json"

  # Database connection check
  postgres_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      query_response:
        - expect: "^\\x00"
        - send: "\\x00\\x00\\x00\\x08\\x04\\xd2\\x16/"

  # Redis connection check
  redis_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      query_response:
        - send: "PING\r\n"
        - expect: "PONG"

  # WebSocket probe
  websocket_connect:
    prober: http
    timeout: 10s
    http:
      method: GET
      headers:
        Connection: Upgrade
        Upgrade: websocket
        Sec-WebSocket-Key: "dGhlIHNhbXBsZSBub25jZQ=="
        Sec-WebSocket-Version: "13"
      valid_status_codes: [101]

  # SSL certificate expiry check
  ssl_expiry:
    prober: http
    timeout: 10s
    http:
      method: GET
      fail_if_not_ssl: true
      tls_config:
        insecure_skip_verify: false
      fail_if_header_not_matches_regexp:
        - "Server:.*"

  # GraphQL endpoint check
  graphql_health:
    prober: http
    timeout: 10s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"query": "query { __typename }"}'
      valid_status_codes: [200]
      fail_if_body_not_matches_regexp:
        - '"data":\s*\{'

  # File download check
  file_download:
    prober: http
    timeout: 30s
    http:
      method: GET
      valid_status_codes: [200]
      headers:
        Accept: "*/*"
      fail_if_header_not_matches_regexp:
        - "Content-Length:[0-9]+"

  # Authentication endpoint check
  auth_endpoint:
    prober: http
    timeout: 10s
    http:
      method: POST
      headers:
        Content-Type: application/json
      body: '{"username": "healthcheck", "password": "healthcheck"}'
      valid_status_codes: [200, 401, 403]
      fail_if_body_matches_regexp:
        - '"error":\s*"internal"'