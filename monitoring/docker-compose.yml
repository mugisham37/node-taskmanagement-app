version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: taskmanagement-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    networks:
      - monitoring
    depends_on:
      - node-exporter
      - postgres-exporter
      - redis-exporter

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: taskmanagement-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    environment:
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GRAFANA_SECRET_KEY=${GRAFANA_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager - Alert routing and notification management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: taskmanagement-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager/templates:/etc/alertmanager/templates:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    environment:
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM:-alerts@taskmanagement.com}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_ROUTING_KEY=${PAGERDUTY_ROUTING_KEY}
      - DEFAULT_EMAIL_TO=${DEFAULT_EMAIL_TO:-admin@taskmanagement.com}
      - CRITICAL_EMAIL_TO=${CRITICAL_EMAIL_TO:-critical@taskmanagement.com}
      - WARNING_EMAIL_TO=${WARNING_EMAIL_TO:-warnings@taskmanagement.com}
    networks:
      - monitoring

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: taskmanagement-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=50000
    volumes:
      - jaeger-data:/tmp
    networks:
      - monitoring

  # Node Exporter - System metrics collection
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: taskmanagement-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # PostgreSQL Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: taskmanagement-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=${DATABASE_URL:-postgresql://taskmanagement:password@postgres:5432/taskmanagement?sslmode=disable}
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    volumes:
      - ./postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    networks:
      - monitoring
    depends_on:
      - postgres

  # Redis Exporter - Cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: taskmanagement-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - monitoring
    depends_on:
      - redis

  # Blackbox Exporter - Uptime monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: taskmanagement-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./uptime/blackbox-exporter.yml:/etc/blackbox_exporter/config.yml:ro
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    networks:
      - monitoring

  # Nginx Exporter - Load balancer metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: taskmanagement-nginx-exporter
    restart: unless-stopped
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    networks:
      - monitoring
    depends_on:
      - nginx

  # Uptime Kuma - Uptime monitoring with UI
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.0
    container_name: taskmanagement-uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - uptime-kuma-data:/app/data
    networks:
      - monitoring

  # Supporting services for the application
  postgres:
    image: postgres:15-alpine
    container_name: taskmanagement-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-taskmanagement}
      - POSTGRES_USER=${POSTGRES_USER:-taskmanagement}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - monitoring
      - app

  redis:
    image: redis:7-alpine
    container_name: taskmanagement-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    networks:
      - monitoring
      - app

  nginx:
    image: nginx:alpine
    container_name: taskmanagement-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"  # Status endpoint
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/status.conf:/etc/nginx/conf.d/status.conf:ro
    networks:
      - monitoring
      - app
    depends_on:
      - taskmanagement-api
      - taskmanagement-web
      - taskmanagement-admin

  # Application services (these would be your actual applications)
  taskmanagement-api:
    image: taskmanagement/api:latest
    container_name: taskmanagement-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL:-postgresql://taskmanagement:password@postgres:5432/taskmanagement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS_ENABLED=true
    networks:
      - monitoring
      - app
    depends_on:
      - postgres
      - redis
      - jaeger

  taskmanagement-web:
    image: taskmanagement/web:latest
    container_name: taskmanagement-web
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://taskmanagement-api:3000
      - PROMETHEUS_METRICS_ENABLED=true
    networks:
      - monitoring
      - app
    depends_on:
      - taskmanagement-api

  taskmanagement-admin:
    image: taskmanagement/admin:latest
    container_name: taskmanagement-admin
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://taskmanagement-api:3000
      - NEXT_PUBLIC_PROMETHEUS_URL=http://prometheus:9090
      - NEXT_PUBLIC_GRAFANA_URL=http://grafana:3000
      - NEXT_PUBLIC_ALERTMANAGER_URL=http://alertmanager:9093
      - NEXT_PUBLIC_JAEGER_URL=http://jaeger:16686
      - PROMETHEUS_METRICS_ENABLED=true
    networks:
      - monitoring
      - app
    depends_on:
      - taskmanagement-api
      - prometheus
      - grafana

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  jaeger-data:
    driver: local
  uptime-kuma-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  monitoring:
    driver: bridge
    name: taskmanagement-monitoring
  app:
    driver: bridge
    name: taskmanagement-app