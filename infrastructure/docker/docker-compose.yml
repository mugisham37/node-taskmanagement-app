version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: taskmanagement-postgres
    environment:
      POSTGRES_DB: taskmanagement
      POSTGRES_USER: taskmanagement
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taskmanagement}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskmanagement -d taskmanagement"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: taskmanagement-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-taskmanagement} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Application Services
  api:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.api
      target: ${BUILD_TARGET:-production}
    container_name: taskmanagement-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://taskmanagement:${POSTGRES_PASSWORD:-taskmanagement}@postgres:5432/taskmanagement
      REDIS_URL: redis://:${REDIS_PASSWORD:-taskmanagement}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-jwt-refresh-secret-key}
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskmanagement-network
    volumes:
      - api_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  web:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.web
      target: ${BUILD_TARGET:-production}
    container_name: taskmanagement-web
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  admin:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.admin
      target: ${BUILD_TARGET:-production}
    container_name: taskmanagement-admin
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3002:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: taskmanagement-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - taskmanagement-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: taskmanagement-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - taskmanagement-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: taskmanagement-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - taskmanagement-network
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: taskmanagement-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - web
      - admin
    networks:
      - taskmanagement-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  taskmanagement-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16