# Default values for taskmanagement
# This is a YAML-formatted file.

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: taskmanagement
  version: "1.0.0"
  environment: production

# Image configuration
image:
  registry: docker.io
  repository: taskmanagement
  tag: "latest"
  pullPolicy: IfNotPresent

# API service configuration
api:
  enabled: true
  name: api
  replicaCount: 3
  image:
    repository: taskmanagement/api
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    NODE_ENV: production
    PORT: "3000"
    LOG_LEVEL: info

# Web service configuration
web:
  enabled: true
  name: web
  replicaCount: 2
  image:
    repository: taskmanagement/web
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    NODE_ENV: production
    PORT: "3000"

# Admin service configuration
admin:
  enabled: true
  name: admin
  replicaCount: 1
  image:
    repository: taskmanagement/admin
    tag: "latest"
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  env:
    NODE_ENV: production
    PORT: "3000"

# Database configuration
database:
  enabled: false  # Set to true if deploying database in cluster
  type: postgresql
  host: ""
  port: 5432
  name: taskmanagement
  username: taskmanagement
  password: ""
  ssl: true
  poolMin: 2
  poolMax: 10

# Redis configuration
redis:
  enabled: false  # Set to true if deploying Redis in cluster
  host: ""
  port: 6379
  password: ""
  database: 0

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: taskmanagement.example.com
      paths:
        - path: /api
          pathType: Prefix
          service: api
        - path: /trpc
          pathType: Prefix
          service: api
        - path: /
          pathType: Prefix
          service: web
    - host: admin.taskmanagement.example.com
      paths:
        - path: /api
          pathType: Prefix
          service: api
        - path: /trpc
          pathType: Prefix
          service: api
        - path: /
          pathType: Prefix
          service: admin
  tls:
    - secretName: taskmanagement-tls
      hosts:
        - taskmanagement.example.com
        - admin.taskmanagement.example.com

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    port: metrics
  prometheusRule:
    enabled: true

# Secrets configuration
secrets:
  database:
    name: taskmanagement-database-secret
    create: true
  redis:
    name: taskmanagement-redis-secret
    create: true
  jwt:
    name: taskmanagement-jwt-secret
    create: true
  external:
    name: taskmanagement-external-secret
    create: true

# ConfigMaps configuration
configMaps:
  app:
    name: taskmanagement-config
    create: true
  database:
    name: taskmanagement-database-config
    create: true
  redis:
    name: taskmanagement-redis-config
    create: true
  monitoring:
    name: taskmanagement-monitoring-config
    create: true

# Persistence configuration
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi

# External services configuration
externalServices:
  smtp:
    host: ""
    port: 587
    username: ""
    password: ""
  s3:
    bucket: ""
    region: ""
    accessKeyId: ""
    secretAccessKey: ""
  monitoring:
    sentry:
      dsn: ""
    datadog:
      apiKey: ""