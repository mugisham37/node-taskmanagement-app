apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: taskmanagement-ingress
  namespace: taskmanagement-production
  labels:
    app: taskmanagement
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: taskmanagement-production-alb
    
    # SSL Configuration
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:ACCOUNT_ID:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Health Check Configuration
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '10'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Load Balancer Attributes
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=taskmanagement-alb-logs,
      access_logs.s3.prefix=production
    
    # Security Groups
    alb.ingress.kubernetes.io/security-groups: sg-production-alb
    
    # WAF
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-east-1:ACCOUNT_ID:regional/webacl/taskmanagement-production-waf/WEB_ACL_ID
    
    # Rate Limiting and Security Headers
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:;" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
spec:
  rules:
  # API Domain
  - host: api.taskmanagement.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: taskmanagement-api
            port:
              number: 80
  
  # Web Application Domain
  - host: taskmanagement.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: taskmanagement-web
            port:
              number: 80
  
  # Web Application with www
  - host: www.taskmanagement.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: taskmanagement-web
            port:
              number: 80
  
  # Admin Dashboard Domain
  - host: admin.taskmanagement.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: taskmanagement-admin
            port:
              number: 80

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: taskmanagement-network-policy
  namespace: taskmanagement-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ALB
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 3000
  
  # Allow inter-service communication
  - from:
    - podSelector:
        matchLabels:
          app: taskmanagement-api
    - podSelector:
        matchLabels:
          app: taskmanagement-web
    - podSelector:
        matchLabels:
          app: taskmanagement-admin
    ports:
    - protocol: TCP
      port: 3000
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS outbound (for external APIs)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow database connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  
  # Allow Redis connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: taskmanagement-api-external
  namespace: taskmanagement-production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "3000"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  selector:
    app: taskmanagement-api
    version: production

---
# Certificate for TLS termination
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: taskmanagement-tls
  namespace: taskmanagement-production
spec:
  secretName: taskmanagement-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - taskmanagement.com
  - www.taskmanagement.com
  - api.taskmanagement.com
  - admin.taskmanagement.com

---
# Cluster Issuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@taskmanagement.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: alb