name: Dependency Updates

on:
  schedule:
    # Run dependency updates weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Automated dependency updates with Renovate
  renovate:
    name: Renovate Dependency Updates
    runs-on: ubuntu-latest
    if: github.repository_owner == github.actor
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RENOVATE_TOKEN }}

      - name: Self-hosted Renovate
        uses: renovatebot/github-action@v43.0.8
        with:
          configurationFile: .github/renovate.json
          token: ${{ secrets.RENOVATE_TOKEN }}
        env:
          LOG_LEVEL: 'debug'

  # Manual dependency update check
  dependency-check:
    name: Check for Outdated Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated dependencies
        run: |
          echo "# Outdated Dependencies Report" > outdated-report.md
          echo "" >> outdated-report.md
          echo "Generated on: $(date)" >> outdated-report.md
          echo "" >> outdated-report.md
          
          # Check for outdated packages
          pnpm outdated --format json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "## Outdated Packages Found" >> outdated-report.md
            echo "" >> outdated-report.md
            echo "| Package | Current | Wanted | Latest | Type |" >> outdated-report.md
            echo "|---------|---------|--------|--------|------|" >> outdated-report.md
            
            # Parse JSON and create markdown table
            cat outdated.json | jq -r '.[] | "| \(.name) | \(.current) | \(.wanted) | \(.latest) | \(.type) |"' >> outdated-report.md
          else
            echo "## ✅ All dependencies are up to date!" >> outdated-report.md
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "" >> outdated-report.md
          echo "## Security Audit" >> outdated-report.md
          echo "" >> outdated-report.md
          
          pnpm audit --json > audit.json || true
          
          if [ -s audit.json ]; then
            VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length')
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "⚠️ **Security vulnerabilities found!**" >> outdated-report.md
              echo "" >> outdated-report.md
              cat audit.json | jq -r '.metadata.vulnerabilities | to_entries[] | select(.value > 0) | "- \(.key): \(.value)"' >> outdated-report.md
            else
              echo "✅ No security vulnerabilities found." >> outdated-report.md
            fi
          else
            echo "✅ No security vulnerabilities found." >> outdated-report.md
          fi

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: |
            outdated-report.md
            outdated.json
            audit.json

      - name: Create issue for outdated dependencies
        if: github.event_name == 'schedule'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Read the report
            const report = fs.readFileSync('outdated-report.md', 'utf8');
            
            // Check if there are outdated dependencies
            const hasOutdated = fs.existsSync('outdated.json') && fs.statSync('outdated.json').size > 0;
            
            if (hasOutdated) {
              // Create or update issue
              const title = '📦 Weekly Dependency Update Report';
              const body = report + '\n\n---\n\n*This issue was automatically generated by the dependency update workflow.*';
              
              // Check if issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['dependencies', 'automated']
              });
              
              const existingIssue = issues.data.find(issue => issue.title === title);
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['dependencies', 'automated']
                });
              }
            }

  # Update GitHub Actions
  update-actions:
    name: Update GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Actions versions
        run: |
          # Find all workflow files
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking $file for action updates..."
            
            # Extract action references and check for updates
            grep -E "uses: [^@]+@v[0-9]+" "$file" | while read line; do
              action=$(echo "$line" | sed -E 's/.*uses: ([^@]+)@.*/\1/')
              current_version=$(echo "$line" | sed -E 's/.*@(v[0-9]+).*/\1/')
              
              echo "Found action: $action at version $current_version"
              # Note: In a real implementation, you would check for latest versions
              # and create PRs for updates
            done
          done

      - name: Check for action security advisories
        run: |
          echo "Checking for security advisories on GitHub Actions..."
          # This would integrate with GitHub's security advisory API
          # to check for known vulnerabilities in actions

  # Dependency update testing
  test-updates:
    name: Test Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.title, 'deps')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive tests
        run: |
          # Run all tests to ensure updates don't break functionality
          pnpm run test:unit
          pnpm run test:integration
          pnpm run lint
          pnpm run type-check

      - name: Build all applications
        run: |
          pnpm run build --filter=@taskmanagement/api
          pnpm run build --filter=@taskmanagement/web
          pnpm run build --filter=@taskmanagement/admin

      - name: Run security scan on updated dependencies
        run: |
          pnpm audit --audit-level moderate

      - name: Performance impact check
        run: |
          # Check bundle sizes and performance impact
          pnpm run analyze:bundle || true

  # Notification for dependency updates
  notify-updates:
    name: Notify Dependency Updates
    runs-on: ubuntu-latest
    needs: [renovate, dependency-check, update-actions]
    if: always() && github.event_name == 'schedule'
    steps:
      - name: Notify team about dependency updates
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#development'
          text: |
            📦 Weekly dependency update check completed!
            
            Results:
            - Renovate: ${{ needs.renovate.result }}
            - Dependency Check: ${{ needs.dependency-check.result }}
            - Actions Update: ${{ needs.update-actions.result }}
            
            Check the repository for any new dependency update PRs or issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}