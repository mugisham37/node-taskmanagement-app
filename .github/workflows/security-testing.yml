name: Security Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dast
          - api-security
          - penetration

jobs:
  dast-scanning:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'dast' || github.event_name != 'workflow_dispatch' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: taskmanagement_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build applications
        run: |
          npm run build:api
          npm run build:web

      - name: Start test environment
        run: |
          # Start API server in background
          DATABASE_URL="postgresql://postgres:testpassword@localhost:5432/taskmanagement_test" \
          REDIS_URL="redis://localhost:6379" \
          NODE_ENV=test \
          npm run start:api &
          
          # Start web server in background
          npm run start:web &
          
          # Wait for services to be ready
          sleep 30

      - name: OWASP ZAP Baseline Scan - API
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules/api-rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: OWASP ZAP Baseline Scan - Web
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules/web-rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: OWASP ZAP Full Scan - API
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules/api-rules.tsv'
          cmd_options: '-a -j -m 10 -T 120'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-results
          path: |
            report_html.html
            report_json.json
            report_md.md

  api-security-testing:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api-security' || github.event_name != 'workflow_dispatch' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: taskmanagement_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start API server
        run: |
          DATABASE_URL="postgresql://postgres:testpassword@localhost:5432/taskmanagement_test" \
          NODE_ENV=test \
          npm run start:api &
          sleep 20

      - name: Run API security tests
        run: |
          # Install security testing tools
          npm install -g newman
          
          # Run Postman security collection
          newman run tests/security/api-security-tests.json \
            --environment tests/security/test-environment.json \
            --reporters cli,json \
            --reporter-json-export api-security-results.json

      - name: SQL Injection Testing
        run: |
          # Run SQLMap tests against API endpoints
          python3 -m pip install sqlmap
          
          # Test authentication endpoint
          sqlmap -u "http://localhost:3000/api/auth/login" \
            --data="email=test@example.com&password=test" \
            --method=POST \
            --batch \
            --output-dir=sqlmap-results

      - name: Authentication Security Testing
        run: |
          # Test JWT token security
          node tests/security/jwt-security-tests.js
          
          # Test session management
          node tests/security/session-security-tests.js
          
          # Test rate limiting
          node tests/security/rate-limiting-tests.js

      - name: Upload API security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-security-results
          path: |
            api-security-results.json
            sqlmap-results/
            security-test-results/

  penetration-testing:
    name: Automated Penetration Testing
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'penetration' || github.event_name != 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60

      - name: Run Nuclei vulnerability scanner
        run: |
          docker run --rm -v $(pwd):/app \
            projectdiscovery/nuclei:latest \
            -target http://localhost:3000,http://localhost:3001 \
            -o /app/nuclei-results.json \
            -json

      - name: Run Nikto web scanner
        run: |
          docker run --rm -v $(pwd):/tmp \
            sullo/nikto:latest \
            -h http://localhost:3001 \
            -output /tmp/nikto-results.xml \
            -Format xml

      - name: Run custom penetration tests
        run: |
          # Install penetration testing tools
          python3 -m pip install requests beautifulsoup4 selenium
          
          # Run custom security tests
          python3 tests/security/penetration-tests.py

      - name: Upload penetration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: penetration-test-results
          path: |
            nuclei-results.json
            nikto-results.xml
            penetration-test-report.html

  security-regression-testing:
    name: Security Regression Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security regression tests
        run: |
          # Run security-focused unit tests
          npm run test:security
          
          # Run security integration tests
          npm run test:security:integration

      - name: Check for security regressions
        run: |
          # Compare current security posture with baseline
          node scripts/security-regression-check.js

  compliance-testing:
    name: Compliance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GDPR Compliance Check
        run: |
          # Check for GDPR compliance requirements
          node scripts/gdpr-compliance-check.js

      - name: SOC 2 Controls Check
        run: |
          # Verify SOC 2 security controls
          node scripts/soc2-controls-check.js

      - name: Security Headers Check
        run: |
          # Verify security headers implementation
          node scripts/security-headers-check.js

      - name: Data Encryption Check
        run: |
          # Verify data encryption implementation
          node scripts/encryption-check.js

  security-quality-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [dast-scanning, api-security-testing, penetration-testing, security-regression-testing, compliance-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security results
        uses: actions/download-artifact@v4

      - name: Evaluate security quality gate
        run: |
          # Analyze all security test results
          node scripts/security-quality-gate.js
          
          # Fail if critical security issues found
          if [ -f "security-gate-failed.txt" ]; then
            echo "Security quality gate failed!"
            cat security-gate-failed.txt
            exit 1
          fi

      - name: Generate security summary
        run: |
          echo "# Security Testing Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Test Results" >> security-summary.md
          echo "- DAST Scanning: ${{ needs.dast-scanning.result }}" >> security-summary.md
          echo "- API Security Testing: ${{ needs.api-security-testing.result }}" >> security-summary.md
          echo "- Penetration Testing: ${{ needs.penetration-testing.result }}" >> security-summary.md
          echo "- Security Regression Testing: ${{ needs.security-regression-testing.result }}" >> security-summary.md
          echo "- Compliance Testing: ${{ needs.compliance-testing.result }}" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-testing-summary
          path: security-summary.md