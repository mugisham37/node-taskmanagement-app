name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: taskmanagement-production

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deployment-approved: ${{ steps.approval.outputs.approved }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

      - name: Check staging health
        run: |
          curl -f https://api-staging.taskmanagement.com/health
          curl -f https://staging.taskmanagement.com/api/health
          curl -f https://admin-staging.taskmanagement.com/api/health

      - name: Run production readiness tests
        run: |
          npm ci
          npm run test:production-readiness

      - name: Manual approval for production deployment
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Deployment Approval Required"
          issue-body: |
            **Production Deployment Request**
            
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            - **Deployment Type**: ${{ github.event.inputs.deployment_type || 'rolling' }}
            - **Triggered by**: ${{ github.actor }}
            
            **Pre-deployment Checks**
            - ✅ Security scan passed
            - ✅ Staging environment healthy
            - ✅ Production readiness tests passed
            
            Please review and approve this production deployment.

  backup-production:
    name: Backup Production Data
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.deployment-approved == 'true'
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create database backup
        run: |
          kubectl create job backup-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/database-backup \
            --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Wait for backup completion
        run: |
          kubectl wait --for=condition=complete --timeout=1800s job/backup-$(date +%Y%m%d-%H%M%S) --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Verify backup integrity
        run: |
          kubectl run backup-verify-$(date +%s) \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- npm run db:backup:verify

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, backup-production]
    environment: production
    strategy:
      matrix:
        service: [api, web, admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy secrets and config
        if: matrix.service == 'api'
        run: |
          kubectl create secret generic database-secret \
            --from-literal=url="${{ secrets.DATABASE_URL_PRODUCTION }}" \
            --from-literal=username="${{ secrets.DB_USERNAME_PRODUCTION }}" \
            --from-literal=password="${{ secrets.DB_PASSWORD_PRODUCTION }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic redis-secret \
            --from-literal=url="${{ secrets.REDIS_URL_PRODUCTION }}" \
            --from-literal=password="${{ secrets.REDIS_PASSWORD_PRODUCTION }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic app-secret \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET_PRODUCTION }}" \
            --from-literal=encryption-key="${{ secrets.ENCRYPTION_KEY_PRODUCTION }}" \
            --from-literal=webhook-secret="${{ secrets.WEBHOOK_SECRET_PRODUCTION }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create configmap app-config \
            --from-literal=NODE_ENV=production \
            --from-literal=LOG_LEVEL=warn \
            --from-literal=API_URL=https://api.taskmanagement.com \
            --from-literal=WEB_URL=https://taskmanagement.com \
            --from-literal=ADMIN_URL=https://admin.taskmanagement.com \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Run database migrations
        if: matrix.service == 'api'
        run: |
          kubectl run migration-job-$(date +%s) \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:main-${{ github.sha }} \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --env-from=configmap/app-config \
            --env-from=secret/database-secret \
            --command -- npm run db:migrate
          
          kubectl wait --for=condition=complete --timeout=600s job/migration-job-$(date +%s) --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Deploy with Rolling Update
        if: github.event.inputs.deployment_type == 'rolling' || github.event.inputs.deployment_type == ''
        run: |
          envsubst < infrastructure/kubernetes/production/${{ matrix.service }}-deployment.yml | kubectl apply -f -
          kubectl rollout status deployment/taskmanagement-${{ matrix.service }} --namespace=${{ env.KUBE_NAMESPACE }} --timeout=900s
        env:
          IMAGE_TAG: main-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

      - name: Deploy with Blue-Green Strategy
        if: github.event.inputs.deployment_type == 'blue-green'
        run: |
          # Create green deployment
          envsubst < infrastructure/kubernetes/production/${{ matrix.service }}-deployment-green.yml | kubectl apply -f -
          kubectl rollout status deployment/taskmanagement-${{ matrix.service }}-green --namespace=${{ env.KUBE_NAMESPACE }} --timeout=900s
          
          # Run health checks on green deployment
          kubectl run health-check-green-$(date +%s) \
            --image=curlimages/curl:latest \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- curl -f http://taskmanagement-${{ matrix.service }}-green:3000/health
          
          # Switch traffic to green
          kubectl patch service taskmanagement-${{ matrix.service }} -p '{"spec":{"selector":{"version":"green"}}}' --namespace=${{ env.KUBE_NAMESPACE }}
          
          # Wait and then remove blue deployment
          sleep 300
          kubectl delete deployment taskmanagement-${{ matrix.service }}-blue --namespace=${{ env.KUBE_NAMESPACE }} --ignore-not-found=true
        env:
          IMAGE_TAG: main-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

      - name: Deploy with Canary Strategy
        if: github.event.inputs.deployment_type == 'canary'
        run: |
          # Deploy canary version (10% traffic)
          envsubst < infrastructure/kubernetes/production/${{ matrix.service }}-deployment-canary.yml | kubectl apply -f -
          kubectl rollout status deployment/taskmanagement-${{ matrix.service }}-canary --namespace=${{ env.KUBE_NAMESPACE }} --timeout=900s
          
          # Monitor canary for 10 minutes
          echo "Monitoring canary deployment for 10 minutes..."
          sleep 600
          
          # Check canary metrics
          kubectl run canary-check-$(date +%s) \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:main-${{ github.sha }} \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- npm run canary:check
          
          # If successful, promote canary to full deployment
          kubectl patch deployment taskmanagement-${{ matrix.service }} -p '{"spec":{"template":{"spec":{"containers":[{"name":"${{ matrix.service }}","image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:main-${{ github.sha }}"}]}}}}' --namespace=${{ env.KUBE_NAMESPACE }}
          kubectl rollout status deployment/taskmanagement-${{ matrix.service }} --namespace=${{ env.KUBE_NAMESPACE }} --timeout=900s
          
          # Remove canary deployment
          kubectl delete deployment taskmanagement-${{ matrix.service }}-canary --namespace=${{ env.KUBE_NAMESPACE }}
        env:
          IMAGE_TAG: main-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

  post-deployment-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment stabilization
        run: sleep 120

      - name: Run production health checks
        run: |
          curl -f https://api.taskmanagement.com/health
          curl -f https://taskmanagement.com/api/health
          curl -f https://admin.taskmanagement.com/api/health

      - name: Run production smoke tests
        run: npm run test:smoke:production
        env:
          PRODUCTION_API_URL: https://api.taskmanagement.com
          PRODUCTION_WEB_URL: https://taskmanagement.com
          PRODUCTION_ADMIN_URL: https://admin.taskmanagement.com

      - name: Run performance validation
        run: npm run test:performance:production

      - name: Check monitoring alerts
        run: |
          # Check if any critical alerts are firing
          curl -f "https://alertmanager.taskmanagement.com/api/v1/alerts?filter=severity=critical&filter=alertstate=firing"

      - name: Validate database integrity
        run: |
          kubectl run db-integrity-check-$(date +%s) \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:main-${{ github.sha }} \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- npm run db:integrity:check

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: failure()
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Rollback all deployments
        run: |
          kubectl rollout undo deployment/taskmanagement-api --namespace=${{ env.KUBE_NAMESPACE }}
          kubectl rollout undo deployment/taskmanagement-web --namespace=${{ env.KUBE_NAMESPACE }}
          kubectl rollout undo deployment/taskmanagement-admin --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Wait for rollback completion
        run: |
          kubectl rollout status deployment/taskmanagement-api --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/taskmanagement-web --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/taskmanagement-admin --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s

      - name: Restore database if needed
        run: |
          kubectl create job restore-$(date +%Y%m%d-%H%M%S) \
            --from=cronjob/database-restore \
            --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Notify incident team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 PRODUCTION ROLLBACK EXECUTED - Deployment failed and system rolled back"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_INCIDENT }}

  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [post-deployment-validation]
    if: success()
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 Production deployment successful for commit ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment tracking
        run: |
          curl -X POST "${{ secrets.DEPLOYMENT_TRACKING_URL }}" \
            -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_TRACKING_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "production",
              "version": "${{ github.sha }}",
              "status": "success",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployment_type": "${{ github.event.inputs.deployment_type || 'rolling' }}"
            }'