name: Docker Build & Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [api, web, admin]
        include:
          - app: api
            dockerfile: apps/api/Dockerfile
            context: .
          - app: web
            dockerfile: apps/web/Dockerfile
            context: .
          - app: admin
            dockerfile: apps/admin/Dockerfile
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ github.event_name != 'pull_request' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Test Docker image
        run: |
          # Test that the image runs correctly
          docker run --rm -d --name test-${{ matrix.app }} \
            -p 3000:3000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint (if available)
          if [ "${{ matrix.app }}" = "api" ]; then
            curl -f http://localhost:3000/health || exit 1
          else
            # For frontend apps, just check if they're serving content
            curl -f http://localhost:3000 || exit 1
          fi
          
          # Stop test container
          docker stop test-${{ matrix.app }}

  # Security scanning for Docker images
  security-scan:
    name: Security Scan Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        app: [api, web, admin]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-${{ matrix.app }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.app }}.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }}
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          output-file: grype-${{ matrix.app }}.sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'grype-${{ matrix.app }}.sarif'

  # Multi-platform build for releases
  multi-platform-build:
    name: Multi-platform Build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [api, web, admin]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
            taskmanagement/${{ matrix.app }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Image optimization and analysis
  image-analysis:
    name: Image Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        app: [api, web, admin]
    steps:
      - name: Analyze image with Dive
        run: |
          # Install dive
          wget https://github.com/wagoodman/dive/releases/download/v0.10.0/dive_0.10.0_linux_amd64.deb
          sudo apt install ./dive_0.10.0_linux_amd64.deb
          
          # Analyze image efficiency
          dive ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }} \
            --ci \
            --lowestEfficiency=0.95 \
            --highestWastedBytes=50MB

      - name: Generate image report
        run: |
          # Get image information
          docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }} > image-info-${{ matrix.app }}.json
          
          # Extract key metrics
          SIZE=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }} --format='{{.Size}}')
          LAYERS=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}:${{ github.sha }} --format='{{len .RootFS.Layers}}')
          
          echo "Image: ${{ matrix.app }}" > image-report-${{ matrix.app }}.txt
          echo "Size: $(($SIZE / 1024 / 1024)) MB" >> image-report-${{ matrix.app }}.txt
          echo "Layers: $LAYERS" >> image-report-${{ matrix.app }}.txt

      - name: Upload image analysis
        uses: actions/upload-artifact@v3
        with:
          name: image-analysis-${{ matrix.app }}
          path: |
            image-info-${{ matrix.app }}.json
            image-report-${{ matrix.app }}.txt

  # Docker Compose testing
  compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create docker-compose override for testing
        run: |
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
              environment:
                - NODE_ENV=test
                - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/taskmanagement_test
                - REDIS_URL=redis://redis:6379
              depends_on:
                - postgres
                - redis
              ports:
                - "3000:3000"
            
            web:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
              environment:
                - NEXT_PUBLIC_API_URL=http://api:3000
              depends_on:
                - api
              ports:
                - "3001:3000"
            
            admin:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}
              environment:
                - NEXT_PUBLIC_API_URL=http://api:3000
              depends_on:
                - api
              ports:
                - "3002:3000"
            
            postgres:
              image: postgres:15
              environment:
                - POSTGRES_PASSWORD=postgres
                - POSTGRES_DB=taskmanagement_test
              ports:
                - "5432:5432"
            
            redis:
              image: redis:7-alpine
              ports:
                - "6379:6379"
          EOF

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          
          # Wait for services to be ready
          timeout 120 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3001; do sleep 5; done'
          timeout 120 bash -c 'until curl -f http://localhost:3002; do sleep 5; done'

      - name: Run integration tests
        run: |
          # Test API endpoints
          curl -f http://localhost:3000/health
          curl -f http://localhost:3000/metrics
          
          # Test web application
          curl -f http://localhost:3001
          
          # Test admin application
          curl -f http://localhost:3002
          
          echo "All services are running correctly!"

      - name: Collect service logs
        if: failure()
        run: |
          docker-compose -f docker-compose.test.yml logs > docker-compose-logs.txt

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-compose-logs
          path: docker-compose-logs.txt

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, security-scan, image-analysis]
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.repository }}/api
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Delete old web images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.repository }}/web
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Delete old admin images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.repository }}/admin
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

  # Notification
  notify-docker:
    name: Notify Docker Build Status
    runs-on: ubuntu-latest
    needs: [build, security-scan, multi-platform-build, compose-test]
    if: always() && (failure() || github.ref == 'refs/heads/main')
    steps:
      - name: Notify on success
        if: needs.build.result == 'success' && needs.security-scan.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🐳 Docker images built and pushed successfully!
            
            Images:
            - API: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
            - Web: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
            - Admin: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            🚨 Docker build failed!
            
            Failed jobs:
            - Build: ${{ needs.build.result }}
            - Security Scan: ${{ needs.security-scan.result }}
            - Multi-platform Build: ${{ needs.multi-platform-build.result }}
            - Compose Test: ${{ needs.compose-test.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}