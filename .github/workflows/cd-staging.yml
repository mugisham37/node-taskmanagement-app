name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [api, web, admin]
    outputs:
      api-image: ${{ steps.meta.outputs.tags }}
      web-image: ${{ steps.meta.outputs.tags }}
      admin-image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    environment:
      name: staging
      url: https://staging.taskmanagement.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/staging/api-deployment.yaml
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/staging/web-deployment.yaml
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/staging/admin-deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f infrastructure/kubernetes/staging/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/taskmanagement-api -n staging --timeout=300s
          kubectl rollout status deployment/taskmanagement-web -n staging --timeout=300s
          kubectl rollout status deployment/taskmanagement-admin -n staging --timeout=300s

      - name: Run database migrations
        run: |
          export KUBECONFIG=kubeconfig
          kubectl create job --from=cronjob/db-migrate db-migrate-$(date +%s) -n staging
          kubectl wait --for=condition=complete job/db-migrate-$(date +%s) -n staging --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test API health endpoint
          curl -f https://staging-api.taskmanagement.app/health || exit 1
          
          # Test Web application
          curl -f https://staging.taskmanagement.app || exit 1
          
          # Test Admin dashboard
          curl -f https://staging-admin.taskmanagement.app || exit 1

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run tests/performance/api-load-test.js --env BASE_URL=https://staging-api.taskmanagement.app
          k6 run tests/performance/web-load-test.js --env BASE_URL=https://staging.taskmanagement.app

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.deploy-staging.result == 'success' && needs.performance-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '‚úÖ Staging deployment successful! üöÄ'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy-staging.result == 'failure' || needs.performance-test.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '‚ùå Staging deployment failed! üö®'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}