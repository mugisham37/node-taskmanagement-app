name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: taskmanagement-staging

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy database secrets
        run: |
          kubectl create secret generic database-secret \
            --from-literal=url="${{ secrets.DATABASE_URL_STAGING }}" \
            --from-literal=username="${{ secrets.DB_USERNAME_STAGING }}" \
            --from-literal=password="${{ secrets.DB_PASSWORD_STAGING }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Redis secrets
        run: |
          kubectl create secret generic redis-secret \
            --from-literal=url="${{ secrets.REDIS_URL_STAGING }}" \
            --from-literal=password="${{ secrets.REDIS_PASSWORD_STAGING }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy application secrets
        run: |
          kubectl create secret generic app-secret \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET_STAGING }}" \
            --from-literal=encryption-key="${{ secrets.ENCRYPTION_KEY_STAGING }}" \
            --from-literal=webhook-secret="${{ secrets.WEBHOOK_SECRET_STAGING }}" \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy ConfigMap
        run: |
          kubectl create configmap app-config \
            --from-literal=NODE_ENV=staging \
            --from-literal=LOG_LEVEL=info \
            --from-literal=API_URL=https://api-staging.taskmanagement.com \
            --from-literal=WEB_URL=https://staging.taskmanagement.com \
            --from-literal=ADMIN_URL=https://admin-staging.taskmanagement.com \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Run database migrations
        run: |
          kubectl run migration-job-$(date +%s) \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:develop-${{ github.sha }} \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --env-from=configmap/app-config \
            --env-from=secret/database-secret \
            --command -- npm run db:migrate
          
          # Wait for migration to complete
          kubectl wait --for=condition=complete --timeout=300s job/migration-job-$(date +%s) --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Deploy API service
        run: |
          envsubst < infrastructure/kubernetes/staging/api-deployment.yml | kubectl apply -f -
          kubectl apply -f infrastructure/kubernetes/staging/api-service.yml
        env:
          IMAGE_TAG: develop-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

      - name: Deploy Web service
        run: |
          envsubst < infrastructure/kubernetes/staging/web-deployment.yml | kubectl apply -f -
          kubectl apply -f infrastructure/kubernetes/staging/web-service.yml
        env:
          IMAGE_TAG: develop-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

      - name: Deploy Admin service
        run: |
          envsubst < infrastructure/kubernetes/staging/admin-deployment.yml | kubectl apply -f -
          kubectl apply -f infrastructure/kubernetes/staging/admin-service.yml
        env:
          IMAGE_TAG: develop-${{ github.sha }}
          NAMESPACE: ${{ env.KUBE_NAMESPACE }}

      - name: Deploy Ingress
        run: |
          kubectl apply -f infrastructure/kubernetes/staging/ingress.yml

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/taskmanagement-api --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/taskmanagement-web --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s
          kubectl rollout status deployment/taskmanagement-admin --namespace=${{ env.KUBE_NAMESPACE }} --timeout=600s

      - name: Run health checks
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Check API health
          kubectl run health-check-api-$(date +%s) \
            --image=curlimages/curl:latest \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- curl -f https://api-staging.taskmanagement.com/health
          
          # Check Web health
          kubectl run health-check-web-$(date +%s) \
            --image=curlimages/curl:latest \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- curl -f https://staging.taskmanagement.com/api/health
          
          # Check Admin health
          kubectl run health-check-admin-$(date +%s) \
            --image=curlimages/curl:latest \
            --restart=Never \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --command -- curl -f https://admin-staging.taskmanagement.com/api/health

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke:staging
        env:
          STAGING_API_URL: https://api-staging.taskmanagement.com
          STAGING_WEB_URL: https://staging.taskmanagement.com
          STAGING_ADMIN_URL: https://admin-staging.taskmanagement.com

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ Staging deployment successful for commit ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ Staging deployment failed for commit ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: failure()
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Rollback deployments
        run: |
          kubectl rollout undo deployment/taskmanagement-api --namespace=${{ env.KUBE_NAMESPACE }}
          kubectl rollout undo deployment/taskmanagement-web --namespace=${{ env.KUBE_NAMESPACE }}
          kubectl rollout undo deployment/taskmanagement-admin --namespace=${{ env.KUBE_NAMESPACE }}

      - name: Wait for rollback completion
        run: |
          kubectl rollout status deployment/taskmanagement-api --namespace=${{ env.KUBE_NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/taskmanagement-web --namespace=${{ env.KUBE_NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/taskmanagement-admin --namespace=${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Notify rollback completion
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔄 Staging environment rolled back due to deployment failure",
              attachments: [{
                color: "warning",
                fields: [{
                  title: "Commit",
                  value: "${{ github.sha }}",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}