name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json

      - name: Upload Snyk results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Archive security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
            snyk.sarif

  sast-scanning:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: ESLint Security Scan
        run: |
          npm ci
          npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || true

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif

  container-scanning:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t taskmanagement/api:scan -f apps/api/Dockerfile .
          docker build -t taskmanagement/web:scan -f apps/web/Dockerfile .
          docker build -t taskmanagement/admin:scan -f apps/admin/Dockerfile .

      - name: Run Trivy vulnerability scanner - API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'taskmanagement/api:scan'
          format: 'sarif'
          output: 'trivy-api-results.sarif'

      - name: Run Trivy vulnerability scanner - Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'taskmanagement/web:scan'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Run Trivy vulnerability scanner - Admin
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'taskmanagement/admin:scan'
          format: 'sarif'
          output: 'trivy-admin-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-api-results.sarif
            trivy-web-results.sarif
            trivy-admin-results.sarif

  secrets-scanning:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  infrastructure-scanning:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-terraform-results.sarif

      - name: Kubernetes Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/kubernetes
          framework: kubernetes
          output_format: sarif
          output_file_path: checkov-k8s-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            checkov-terraform-results.sarif
            checkov-k8s-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scanning, sast-scanning, container-scanning, secrets-scanning, infrastructure-scanning]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          mkdir -p security-reports
          echo "# Security Scan Report - $(date)" > security-reports/security-report.md
          echo "" >> security-reports/security-report.md
          echo "## Scan Results Summary" >> security-reports/security-report.md
          echo "" >> security-reports/security-report.md
          
          # Process scan results and generate summary
          if [ -f "security-scan-results/npm-audit-results.json" ]; then
            echo "### Dependency Vulnerabilities" >> security-reports/security-report.md
            echo "\`\`\`json" >> security-reports/security-report.md
            cat security-scan-results/npm-audit-results.json >> security-reports/security-report.md
            echo "\`\`\`" >> security-reports/security-report.md
            echo "" >> security-reports/security-report.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-reports/security-report.md')) {
              const report = fs.readFileSync('security-reports/security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Scan Results\n\n${report}`
              });
            }