version: '3.8'

services:
  # Performance Test Database
  postgres-perf:
    image: postgres:15-alpine
    container_name: taskmanagement-postgres-perf
    environment:
      POSTGRES_DB: taskmanagement_perf
      POSTGRES_USER: taskmanagement_perf
      POSTGRES_PASSWORD: perf123
    volumes:
      - postgres_perf_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5434:5432"
    networks:
      - perf-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskmanagement_perf -d taskmanagement_perf"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Performance Test Redis
  redis-perf:
    image: redis:7-alpine
    container_name: taskmanagement-redis-perf
    command: redis-server --requirepass perf123 --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_perf_data:/data
    ports:
      - "6381:6379"
    networks:
      - perf-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # API for Performance Testing (Multiple instances)
  api-perf-1:
    build:
      context: .
      dockerfile: infrastructure/docker/api.Dockerfile
    container_name: taskmanagement-api-perf-1
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://taskmanagement_perf:perf123@postgres-perf:5432/taskmanagement_perf
      REDIS_URL: redis://:perf123@redis-perf:6379
      JWT_SECRET: perf-jwt-secret-key
      ENCRYPTION_KEY: perf-encryption-key-32-chars-long
      API_PORT: 3000
      LOG_LEVEL: warn
    networks:
      - perf-network
    depends_on:
      postgres-perf:
        condition: service_healthy
      redis-perf:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  api-perf-2:
    build:
      context: .
      dockerfile: infrastructure/docker/api.Dockerfile
    container_name: taskmanagement-api-perf-2
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://taskmanagement_perf:perf123@postgres-perf:5432/taskmanagement_perf
      REDIS_URL: redis://:perf123@redis-perf:6379
      JWT_SECRET: perf-jwt-secret-key
      ENCRYPTION_KEY: perf-encryption-key-32-chars-long
      API_PORT: 3000
      LOG_LEVEL: warn
    networks:
      - perf-network
    depends_on:
      postgres-perf:
        condition: service_healthy
      redis-perf:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Load Balancer for Performance Testing
  nginx-perf:
    image: nginx:alpine
    container_name: taskmanagement-nginx-perf
    volumes:
      - ./infrastructure/docker/nginx/perf.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3000:80"
    networks:
      - perf-network
    depends_on:
      - api-perf-1
      - api-perf-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring for Performance Tests
  prometheus-perf:
    image: prom/prometheus:latest
    container_name: taskmanagement-prometheus-perf
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/perf-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_perf_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - perf-network

  # Grafana for Performance Monitoring
  grafana-perf:
    image: grafana/grafana:latest
    container_name: taskmanagement-grafana-perf
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_perf_data:/var/lib/grafana
      - ./monitoring/grafana/perf-provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3004:3000"
    networks:
      - perf-network
    depends_on:
      - prometheus-perf

  # K6 Load Testing
  k6:
    image: grafana/k6:latest
    container_name: taskmanagement-k6
    volumes:
      - ./tests/performance:/scripts
      - ./performance-results:/results
    networks:
      - perf-network
    depends_on:
      - nginx-perf
    command: run --out json=/results/results.json /scripts/load-test.js
    environment:
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus-perf:9090/api/v1/write
      K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: true

networks:
  perf-network:
    driver: bridge

volumes:
  postgres_perf_data:
    driver: local
  redis_perf_data:
    driver: local
  prometheus_perf_data:
    driver: local
  grafana_perf_data:
    driver: local