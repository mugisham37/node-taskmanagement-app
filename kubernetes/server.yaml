apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
  namespace: taskmanagement
  labels:
    app: server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: server
        image: taskmanagement/server:latest
        ports:
        - containerPort: 3001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: NODE_ENV
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: SERVER_PORT
        - name: DATABASE_URL
          value: "postgresql://postgres:$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: DATABASE_NAME
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: taskmanagement-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: REDIS_PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: taskmanagement-secrets
              key: JWT_SECRET
        - name: CORS_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: CORS_ORIGIN
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: uploads-volume
          mountPath: /app/uploads
      volumes:
      - name: uploads-volume
        emptyDir: {}
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h $(DATABASE_HOST) -p $(DATABASE_PORT) -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: DATABASE_PORT
      - name: wait-for-redis
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h $(REDIS_HOST) -p $(REDIS_PORT) ping; do
            echo "Waiting for redis..."
            sleep 2
          done
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: taskmanagement-config
              key: REDIS_PORT
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
  namespace: taskmanagement
spec:
  selector:
    app: server
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: server-hpa
  namespace: taskmanagement
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: server-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80