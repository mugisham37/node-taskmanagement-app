import { Task, Project, Comment, Activity } from '@prisma/client';

export const projectFixtures = {
  activeProject: {
    id: 'active-project-id',
    workspaceId: 'test-workspace-id',
    name: 'Active Project',
    description: 'An active project for testing',
    color: '#3B82F6',
    ownerId: 'admin-user-id',
    status: 'ACTIVE' as const,
    priority: 'HIGH' as const,
    startDate: new Date('2024-01-01'),
    endDate: new Date('2024-06-01'),
    budgetAmount: 50000,
    budgetCurrency: 'USD',
    settings: {
      allowExternalCollaborators: false,
      requireTaskApproval: true,
      defaultTaskPriority: 'MEDIUM',
    },
    templateId: null,
    isArchived: false,
    archivedAt: null,
    archivedBy: null,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
    deletedAt: null,
  } as Project,

  completedProject: {
    id: 'completed-project-id',
    workspaceId: 'test-workspace-id',
    name: 'Completed Project',
    description: 'A completed project',
    color: '#10B981',
    ownerId: 'admin-user-id',
    status: 'COMPLETED' as const,
    priority: 'MEDIUM' as const,
    startDate: new Date('2023-06-01'),
    endDate: new Date('2023-12-01'),
    budgetAmount: 25000,
    budgetCurrency: 'USD',
    settings: {},
    templateId: null,
    isArchived: false,
    archivedAt: null,
    archivedBy: null,
    createdAt: new Date('2023-06-01'),
    updatedAt: new Date('2023-12-01'),
    deletedAt: null,
  } as Project,

  archivedProject: {
    id: 'archived-project-id',
    workspaceId: 'test-workspace-id',
    name: 'Archived Project',
    description: 'An archived project',
    color: '#6B7280',
    ownerId: 'admin-user-id',
    status: 'CANCELLED' as const,
    priority: 'LOW' as const,
    startDate: new Date('2023-01-01'),
    endDate: new Date('2023-03-01'),
    budgetAmount: null,
    budgetCurrency: 'USD',
    settings: {},
    templateId: null,
    isArchived: true,
    archivedAt: new Date('2023-03-01'),
    archivedBy: 'admin-user-id',
    createdAt: new Date('2023-01-01'),
    updatedAt: new Date('2023-03-01'),
    deletedAt: null,
  } as Project,
};

export const taskFixtures = {
  todoTask: {
    id: 'todo-task-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'Todo Task',
    description: 'A task that needs to be done',
    status: 'TODO' as const,
    priority: 'MEDIUM' as const,
    assigneeId: 'regular-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
    startDate: null,
    completedAt: null,
    estimatedHours: 8,
    actualHours: null,
    storyPoints: 5,
    tags: ['frontend', 'ui'],
    labels: ['feature'],
    epicId: null,
    parentTaskId: null,
    attachments: [],
    externalLinks: [],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date(),
    customFields: {
      complexity: 'medium',
      category: 'development',
    },
    position: 0,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
    deletedAt: null,
  } as Task,

  inProgressTask: {
    id: 'in-progress-task-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'In Progress Task',
    description: 'A task currently being worked on',
    status: 'IN_PROGRESS' as const,
    priority: 'HIGH' as const,
    assigneeId: 'regular-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now
    startDate: new Date(),
    completedAt: null,
    estimatedHours: 16,
    actualHours: 8,
    storyPoints: 8,
    tags: ['backend', 'api'],
    labels: ['feature', 'urgent'],
    epicId: null,
    parentTaskId: null,
    attachments: [
      {
        id: 'attachment-1',
        name: 'design.pdf',
        url: 'https://example.com/design.pdf',
        size: 1024000,
        mimeType: 'application/pdf',
      },
    ],
    externalLinks: [
      {
        title: 'API Documentation',
        url: 'https://docs.example.com/api',
      },
    ],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date(),
    customFields: {
      complexity: 'high',
      category: 'development',
      reviewRequired: true,
    },
    position: 1,
    createdAt: new Date('2024-01-02'),
    updatedAt: new Date(),
    deletedAt: null,
  } as Task,

  completedTask: {
    id: 'completed-task-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'Completed Task',
    description: 'A task that has been completed',
    status: 'DONE' as const,
    priority: 'MEDIUM' as const,
    assigneeId: 'regular-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date('2024-01-15'),
    startDate: new Date('2024-01-10'),
    completedAt: new Date('2024-01-14'),
    estimatedHours: 12,
    actualHours: 10,
    storyPoints: 3,
    tags: ['testing', 'qa'],
    labels: ['bug-fix'],
    epicId: null,
    parentTaskId: null,
    attachments: [],
    externalLinks: [],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date('2024-01-14'),
    customFields: {
      complexity: 'low',
      category: 'testing',
    },
    position: 2,
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-01-14'),
    deletedAt: null,
  } as Task,

  overdueTask: {
    id: 'overdue-task-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'Overdue Task',
    description: 'A task that is past its due date',
    status: 'TODO' as const,
    priority: 'URGENT' as const,
    assigneeId: 'regular-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    startDate: null,
    completedAt: null,
    estimatedHours: 4,
    actualHours: null,
    storyPoints: 2,
    tags: ['hotfix'],
    labels: ['bug', 'critical'],
    epicId: null,
    parentTaskId: null,
    attachments: [],
    externalLinks: [],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date(),
    customFields: {
      complexity: 'low',
      category: 'bug-fix',
      escalated: true,
    },
    position: 3,
    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
    updatedAt: new Date(),
    deletedAt: null,
  } as Task,

  epicTask: {
    id: 'epic-task-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'Epic Task',
    description: 'A large epic containing multiple subtasks',
    status: 'IN_PROGRESS' as const,
    priority: 'HIGH' as const,
    assigneeId: 'admin-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
    startDate: new Date(),
    completedAt: null,
    estimatedHours: 80,
    actualHours: 20,
    storyPoints: 34,
    tags: ['epic', 'feature'],
    labels: ['epic'],
    epicId: null,
    parentTaskId: null,
    attachments: [],
    externalLinks: [],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date(),
    customFields: {
      complexity: 'high',
      category: 'epic',
      milestone: 'Q1 2024',
    },
    position: 4,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date(),
    deletedAt: null,
  } as Task,

  subtask: {
    id: 'subtask-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    title: 'Subtask',
    description: 'A subtask of the epic',
    status: 'TODO' as const,
    priority: 'MEDIUM' as const,
    assigneeId: 'regular-user-id',
    creatorId: 'admin-user-id',
    reporterId: 'admin-user-id',
    dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days from now
    startDate: null,
    completedAt: null,
    estimatedHours: 8,
    actualHours: null,
    storyPoints: 3,
    tags: ['subtask'],
    labels: ['feature'],
    epicId: 'epic-task-id',
    parentTaskId: 'epic-task-id',
    attachments: [],
    externalLinks: [],
    recurringTaskId: null,
    recurrenceInstanceDate: null,
    watchers: ['admin-user-id', 'regular-user-id'],
    lastActivityAt: new Date(),
    customFields: {
      complexity: 'medium',
      category: 'development',
    },
    position: 0,
    createdAt: new Date('2024-01-02'),
    updatedAt: new Date('2024-01-02'),
    deletedAt: null,
  } as Task,
};

export const commentFixtures = {
  taskComment: {
    id: 'task-comment-id',
    content: 'This is a comment on the task',
    authorId: 'regular-user-id',
    taskId: 'todo-task-id',
    projectId: null,
    parentId: null,
    mentions: ['admin-user-id'],
    attachments: [],
    createdAt: new Date('2024-01-02'),
    updatedAt: new Date('2024-01-02'),
    deletedAt: null,
  } as Comment,

  projectComment: {
    id: 'project-comment-id',
    content: 'This is a comment on the project',
    authorId: 'admin-user-id',
    taskId: null,
    projectId: 'active-project-id',
    parentId: null,
    mentions: [],
    attachments: [],
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
    deletedAt: null,
  } as Comment,

  replyComment: {
    id: 'reply-comment-id',
    content: 'This is a reply to the task comment',
    authorId: 'admin-user-id',
    taskId: 'todo-task-id',
    projectId: null,
    parentId: 'task-comment-id',
    mentions: ['regular-user-id'],
    attachments: [],
    createdAt: new Date('2024-01-03'),
    updatedAt: new Date('2024-01-03'),
    deletedAt: null,
  } as Comment,
};

export const activityFixtures = {
  taskCreatedActivity: {
    id: 'task-created-activity-id',
    userId: 'admin-user-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    taskId: 'todo-task-id',
    type: 'TASK_CREATED' as const,
    action: 'created',
    description: 'Created task "Todo Task"',
    metadata: {
      taskId: 'todo-task-id',
      taskTitle: 'Todo Task',
    },
    createdAt: new Date('2024-01-01'),
  } as Activity,

  taskAssignedActivity: {
    id: 'task-assigned-activity-id',
    userId: 'admin-user-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    taskId: 'todo-task-id',
    type: 'TASK_UPDATED' as const,
    action: 'assigned',
    description: 'Assigned task "Todo Task" to Regular User',
    metadata: {
      taskId: 'todo-task-id',
      taskTitle: 'Todo Task',
      assigneeId: 'regular-user-id',
      assigneeName: 'Regular User',
    },
    createdAt: new Date('2024-01-01'),
  } as Activity,

  taskCompletedActivity: {
    id: 'task-completed-activity-id',
    userId: 'regular-user-id',
    workspaceId: 'test-workspace-id',
    projectId: 'active-project-id',
    taskId: 'completed-task-id',
    type: 'TASK_COMPLETED' as const,
    action: 'completed',
    description: 'Completed task "Completed Task"',
    metadata: {
      taskId: 'completed-task-id',
      taskTitle: 'Completed Task',
      completedAt: '2024-01-14T00:00:00.000Z',
    },
    createdAt: new Date('2024-01-14'),
  } as Activity,
};

export function createProjectFixture(
  fixture: keyof typeof projectFixtures,
  overrides: Partial<Project> = {}
): Project {
  return { ...projectFixtures[fixture], ...overrides };
}

export function createTaskFixture(
  fixture: keyof typeof taskFixtures,
  overrides: Partial<Task> = {}
): Task {
  return { ...taskFixtures[fixture], ...overrides };
}

export function createCommentFixture(
  fixture: keyof typeof commentFixtures,
  overrides: Partial<Comment> = {}
): Comment {
  return { ...commentFixtures[fixture], ...overrides };
}

export function createActivityFixture(
  fixture: keyof typeof activityFixtures,
  overrides: Partial<Activity> = {}
): Activity {
  return { ...activityFixtures[fixture], ...overrides };
}
